**МОДУЛЬ:** TaskManager
**Версия:** 1.0
**Язык:** Python
**Описание:** Модуль для управления списком задач (создание, отображение, удаление, отметка выполнения, сохранение в файл).

---

### ВАЖНО

Все функции должны работать в соответствии с приведённым ниже описанием.
Любое отклонение считается ошибкой.

---

## ФУНКЦИИ

---

### 1. display_tasks(task_list)

**Назначение:** отображает все задачи в списке с их индексами.
**Ожидаемое поведение:**

* Каждая задача выводится в виде строки:

  ```
  индекс: <номер>, задача: <описание>, статус выполнения: <выполнено/не выполнено>
  ```
* Возвращает одну большую строку со всеми задачами.
* Если `done` == 1 → «выполнено», иначе → «не выполнено».

**Пример:**

```python
tasks = [{"desc": "купить молоко", "done": 0}, {"desc": "сделать ДЗ", "done": 1}]
print(display_tasks(tasks))
# Ожидаемый результат:
# индекс: 0, задача: купить молоко, статус выполнения: не выполнено
# индекс: 1, задача: сделать ДЗ, статус выполнения: выполнено
```

---

### 2. add_task(task_list, description)

**Назначение:** добавляет новую задачу в список.
**Ожидаемое поведение:**

* Если описание не пустое, добавляет задачу в виде словаря `{"desc": описание, "done": 0}`.
* Если описание пустое — выводит сообщение:
  `"описание задачи не должно быть пустым!"`
* После добавления вызывает `filing(task_list)` для сохранения в файл.

**Пример:**

```python
add_task(tasks, "купить хлеб")
# Ожидаемый результат: задача добавлена в список и записана в файл
```

---

### 3. mark_task_done(task_list, index)

**Назначение:** отмечает задачу по индексу как выполненную.
**Ожидаемое поведение:**

* Меняет значение `"done"` на `1` у задачи с указанным индексом.
* Если индекс выходит за пределы списка — выводит сообщение:
  `"такого индекса не существует! ..."`
* Если индекс имеет неверный формат (например, не число) — выводит сообщение:
  `"неправильный формат ввода. Индекс должен быть целым неотрицательным числом"`
* После изменения вызывает `filing(task_list)` для сохранения изменений.

**Пример:**

```python
mark_task_done(tasks, 0)
# Ожидаемый результат: первая задача становится выполненной и сохраняется
```

---

### 4. delete_task(task_list, index)

**Назначение:** удаляет задачу по индексу.
**Ожидаемое поведение:**

* Удаляет задачу по индексу.
* При ошибке типа или значения выводит сообщение:
  `"неправильный формат ввода. Индекс должен быть целым неотрицательным числом"`
Если индекс выходит за пределы списка — выводит сообщение:
  `"такого индекса не существует! ..."`
* После удаления вызывает `filing(task_list)` для обновления файла.

**Пример:**

```python
delete_task(tasks, 1)
# Ожидаемый результат: задача с индексом 1 удалена и изменения сохранены
```

---

### 5. get_task_count(task_list)

**Назначение:** возвращает общее количество задач.
**Ожидаемое поведение:**

* Возвращает строковое значение `len(tasks)`.

**Пример:**

```python
print(get_task_count(tasks))
# Ожидаемый результат: "3"
```

---

### 6. filing(tasks)

**Назначение:** записывает текущий список задач в файл `tasks.txt`.
**Ожидаемое поведение:**

* Каждая строка файла имеет формат:

  ```
  описание,  done
  ```
* При возникновении ошибки записи выводит сообщение:
  `"произошла ошибка при сохранении файла: ..."`

**Пример:**

```python
filing(tasks)
# Ожидаемый результат: tasks.txt обновлён с актуальными данными
```

---

### 7. main_menu(task_list)

**Назначение:** отображает меню и управляет действиями пользователя.
**Ожидаемое поведение:**

* Отображает текстовое меню:

  ```
  1 — показать задачи  
  2 — добавить задачу  
  3 — отметить как выполненную  
  4 — удалить задачу  
  5 — показать количество задач  
  6 — показать меню  
  7 — выход (с сохранением)
  ```
* При выборе действия вызывает соответствующую функцию.
* При неверном вводе отображает инструкцию повторно.
* При выходе (7) вызывает `filing(tasks)` и выводит:

  ```
  список задач сохранен в tasks.txt перед выходом
  осуществлен выход из менеджера задач.
  ```
* Поддерживает безопасный ввод через `safe_input()`.

---

### 8. safe_input(prompt)

**Назначение:** обеспечивает безопасный ввод данных пользователем (вложенная функция в `main_menu`).
**Ожидаемое поведение:**

* Возвращает введённую строку без пробелов по краям.
* При `KeyboardInterrupt` возвращает `"7"` для выхода из программы.
* При других исключениях выводит сообщение об ошибке и повторяет запрос.

**Пример:**

```python
user_input = safe_input("Введите описание задачи: ")
# Ожидаемый результат: корректный ввод или безопасный выход при Ctrl+C
```

---

## ПОДРОБНЫЕ ПРИМЕРЫ КОРРЕКТНОЙ РАБОТЫ

---

### === ФУНКЦИЯ 1: display_tasks ===

```python
tasks = [{"desc": "убрать комнату", "done": 0}]
print(display_tasks(tasks))
# Ожидаемый результат:
# индекс: 0, задача: убрать комнату, статус выполнения: не выполнено
```

---

### === ФУНКЦИЯ 2: add_task ===

```python
add_task(tasks, "прочитать книгу")
# Ожидаемый результат:
# добавлена новая задача, список сохранён в tasks.txt
```

---

### === ФУНКЦИЯ 3: mark_task_done ===

```python
mark_task_done(tasks, "0")
# Ожидаемый результат:
# задача с индексом 0 отмечена как выполненная
```

---

### === ФУНКЦИЯ 4: delete_task ===

```python
delete_task(tasks, "1")
# Ожидаемый результат:
# задача с индексом 1 удалена
```

---

### === ФУНКЦИЯ 5: get_task_count ===

```python
print(get_task_count(tasks))
# Ожидаемый результат: "2"
```

---

### === ФУНКЦИЯ 6: filing ===

```python
filing(tasks)
# Ожидаемый результат:
# tasks.txt содержит обновлённый список задач
```

---

### === ФУНКЦИЯ 7: main_menu ===

```python
main_menu(tasks)
# Ожидаемое поведение:
# программа отображает меню и реагирует на команды пользователя
```

---

### === ФУНКЦИЯ 8: safe_input ===

```python
safe_input("Введите индекс задачи: ")
# Ожидаемое поведение:
# возвращает введённую строку, корректно обрабатывает Ctrl+C
```

---

### ТЕСТИРОВАНИЕ

При тестировании проверяйте соответствие ВСЕХ функций заявленному поведению.
Любое отклонение считается ошибкой.
Особое внимание уделить обработке ошибок при вводе индекса и записи файла.
