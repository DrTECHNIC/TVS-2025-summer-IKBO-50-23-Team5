Класс BankAccount представляет собой симулятор банковского счета с основными банковскими операциями. При создании экземпляра класса автоматически генерируется уникальный идентификатор счета и запускается основной цикл управления.

Методы класса:
__init__(self)
Конструктор класса - инициализирует новый банковский счет.
Действия:
Генерирует случайный ID счета в диапазоне от 1,000,000 до 9,999,999
Устанавливает начальный баланс в 0
Инициализирует пустую историю операций
Устанавливает флаг наличия кредита в False
Устанавливает сумму кредита в 0
Запускает основной цикл управления

deposit(self)
Пополнение счета - позволяет внести средства на счет.
Логика работы:
1.Отображает текущий баланс
2.Запрашивает сумму для пополнения
3.Проверяет корректность суммы (должна быть положительной)
При успешной проверке:
1.Увеличивает баланс
2.Добавляет операцию в историю (положительное число)
3.Выводит сообщение об успехе
Обработка ошибок:
Выводит "Invalid amount" при некорректной сумме

withdraw(self)
Снятие средств - позволяет снять деньги со счета.
Логика работы:
Отображает текущий баланс
Запрашивает сумму для снятия
Проверяет корректность суммы (должна быть положительной и не превышать баланс)
При успешной проверке:
Уменьшает баланс
Добавляет операцию в историю (отрицательное число)
Выводит сообщение об успехе
Обработка ошибок:
Выводит "Invalid amount" при некорректной сумме

view_history(self)
Просмотр истории операций - отображает все проведенные операции.
Формат вывода:
Каждая операция выводится в отдельной строке
Пополнения отображаются со знаком "+"
Снятия отображаются со знаком "-"

add_percents(self)
Начисление процентов - добавляет 2% от текущего баланса на счет.
Расчет: новый_баланс = текущий_баланс + (текущий_баланс × 0.02)

get_loan(self)
Получение кредита - позволяет взять кредит и зачислить его на счет.
Условия:
Можно получить только один кредит одновременно
Сумма кредита должна быть положительной
Логика работы:
Проверяет наличие активного кредита
Запрашивает сумму кредита
При успешной проверке:
Увеличивает баланс на сумму кредита
Устанавливает флаг has_loan в True
Сохраняет сумму кредита
Обработка ошибок:
"You can't get loan if you already have a loan" - при попытке взять второй кредит
"Invalid loan amount" - при некорректной сумме

pay_loan(self)
Погашение кредита - позволяет частично или полностью погасить кредит.
Логика работы:
Проверяет наличие активного кредита
Отображает текущий баланс и сумму кредита
Запрашивает сумму для погашения
Уменьшает сумму задолженности
Снимает со счета сумму погашения
После уменьшения суммы если сумма меньше или равна 0 устанавливает has_loan в False и сумму кредита в 0
Если была введена сумма, превышающая долг, снимает только необходимую сумму для полного погашения
Обработка ошибок:
"You don't have a loan" - при отсутствии активного кредита

main_cycle(self)
Основной цикл управления - предоставляет пользовательский интерфейс для работы со счетом.
Доступные опции:
Deposit - Пополнение счета
Withdraw - Снятие средств
Add interest - Начисление процентов (2%)
Get a loan - Получение кредита
Pay off a loan - Погашение кредита
View operation history - Просмотр истории операций
Exit - Выход из программы
